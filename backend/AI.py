from extract_policy import extract_policy
from openai import OpenAI
from dotenv import load_dotenv
import os
import re

def getSummary(policy):

  # API key stored in .env for protection
  # Used to retrieve the API key
  # Alternatively api_key = (Personal OpenAI Key) can be used
  load_dotenv()
  client = OpenAI(
      api_key = os.getenv("AI_KEY"),
  )

  response = client.chat.completions.create(
    model="gpt-4-turbo",
    messages=[
      # System-content: Specifications given to the AI bot
      # User-content: Privacy Policy that was pulled from extract_policy.py
      {"role": "system", "content": "Given a string of words, find what info is being collected, what it might be used for, in a numbered list with few words as possible. Format output for HTML"},
      {"role": "user", "content": policy}
    ],
    temperature=1,
    max_tokens=500,
    top_p=1,
    frequency_penalty=0,
    presence_penalty=0
  )

  # Removes extra formatting generated by AI to make it easier for front end
  summary = re.sub("html|^```|```$","", response.choices[0].message.content)
  return summary

# Given the privacy policy, uses the AI to find either the email or summarize the process to opt out of data collection
def getOptOut(policy):

  # API key stored in .env for protection
  # Used to retrieve the API key
  # Alternatively api_key = (Personal OpenAI Key) can be used
  load_dotenv()
  client = OpenAI(
      api_key = os.getenv("AI_KEY"),
  )

  response = client.chat.completions.create(
    model="gpt-4-turbo",
    messages=[
      # System-content: Specifications given to the AI bot
      # User-content: Privacy Policy that was pulled from extract_policy.py
      {"role": "system", "content": "Given a string of text, find the opt out email or process company"},
      {"role": "user", "content": policy}
    ],
    temperature=1,
    max_tokens=500,
    top_p=1,
    frequency_penalty=0,
    presence_penalty=0
  )


  return response.choices[0].message.content